#!/bin/bash
#
# Slackware build script for Gimp G'MIC plugin
#
# Copyright 2011-2020 Corrado Franco (https://corradofranco.it)
# All rights reserved.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version, with the following exception:
# the text of the GPL license may be omitted.

# This program is distributed in the hope that it will be useful, but
# without any warranty; without even the implied warranty of
# merchantability or fitness for a particular purpose. Compiling,
# interpreting, executing or merely reading the text of the program
# may result in lapses of consciousness and/or very being, up to and
# including the end of all existence and the Universe as we know it.
# See the GNU General Public License for more details.

# You may have received a copy of the GNU General Public License along
# with this program (most likely, a file named COPYING).  If not, see
# <http://www.gnu.org/licenses/>.
#
# Latest version of this SlackBuild at https://github.com/conraid/SlackBuilds
#
set -eu

cd $(dirname $0) ; CWD=$(pwd)

PKGNAM=gmic
SRCVERSION=2.9.2
VERSION=$SRCVERSION
BUILD=${BUILD:-1}
TAG=${TAG:-cf}
TMP=${TMP:-/tmp/pkg}
PKG=$TMP/package-$PKGNAM
OUTPUT=${OUTPUT:-/tmp}

PLUGINS=${PLUGINS:-"none gimp krita"} # Plugins: none, gimp, krita, digikam
ZART=${ZART:-"NO"} # YES to compile ZART. In my system it produces a segfault

if [ -z ${ARCH:=""} ]; then
  case "$( uname -m )" in
    i?86) ARCH=i686 ;;
    arm*) ARCH=arm ;;
       *) ARCH=$( uname -m ) ;;
  esac
fi

# If the variable PRINT_PACKAGE_NAME is set, then this script will report what
# the name of the created package would be, and then exit. This information
# could be useful to other scripts.
if [ ! -z "${PRINT_PACKAGE_NAME:-""}" ]; then
  echo "$PKGNAM-$VERSION-$ARCH-${BUILD}${TAG}.txz"
  exit 0
fi

if [ "$ARCH" = "i586" ]; then
  SLKCFLAGS="-O2 -march=i586 -mtune=i686 -fno-fast-math"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686 -fno-fast-math"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC -pipe -fomit-frame-pointer -fno-fast-math"
  LIBDIRSUFFIX="64"
else
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX=""
fi

rm -rf $PKG
mkdir -p $TMP $PKG $OUTPUT
cd $TMP
rm -rf $PKGNAM-$SRCVERSION
tar xvf $CWD/${PKGNAM}_$SRCVERSION.tar.gz
cd $PKGNAM-$SRCVERSION

chown -R root:root .
chmod -R u+w,go+r-w,a+X-s .

# Apply patches
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi

# Fix path
sed -e "/^LIB/s/lib/lib$LIBDIRSUFFIX/" \
    -e "s|share/doc/gmic|doc/gmic-$VERSION|g" \
    -e 's|/share/man|/man|g' -i src/Makefile

# Build library and command line
cmake -B build -Wno-dev \
  -DCMAKE_CXX_FLAGS_RELEASE="$SLKCFLAGS -DNDEBUG" \
  -DCMAKE_BUILD_TYPE=Release \
  -DCMAKE_INSTALL_PREFIX=/usr \
  -DENABLE_DYNAMIC_LINKING=ON \
  -DBUILD_LIB_STATIC=OFF

cmake --build build
DESTDIR=$PKG cmake --install build

cd $PKGNAM-qt
for PLUGIN_TYPE in $PLUGINS; do
  export LDFLAGS="-L../build"
  cmake -B build-$PLUGIN_TYPE -Wno-dev \
    -DCMAKE_CXX_FLAGS_RELEASE="$SLKCFLAGS -DNDEBUG" \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DENABLE_DYNAMIC_LINKING=ON \
    -DGMIC_PATH=$TMP/$PKGNAM-$VERSION/src \
    -DGMIC_LIB_PATH=$TMP/$PKGNAM-$VERSION/build \
    -DGMIC_QT_HOST=$PLUGIN_TYPE

  cmake --build build-$PLUGIN_TYPE
  DESTDIR=$PKG cmake --install build-$PLUGIN_TYPE
done
cd ..

if [ $ZART == "YES" ]; then
  ## Build zart
  cd zart
  SLKCFLAGS=${SLKCFLAGS/-O2/}
  qmake-qt5 \
    PREFIX=/usr \
    QMAKE_CFLAGS="$SLKCFLAGS" \
    QMAKE_CXXFLAGS="$SLKCFLAGS -DOPENCV2_HEADERS" \
    QMAKE_CFLAGS_RELEASE="$SLKCFLAGS" \
    QMAKE_CXXFLAGS_RELEASE="$SLKCFLAGS -DOPENCV2_HEADERS" \
    GMIC_DYNAMIC_LINKING=on \
    GMIC_PATH=../src \
    GMIC_LIB_PATH=$TMP/$PKGNAM-$VERSION/build \
    -o Makefile zart.pro

  make -j1
  install -Dm755 zart $PKG/usr/bin/zart
cd ..
fi

# Don't ship .la files:
rm -f $PKG/{,usr/}lib${LIBDIRSUFFIX}/*.la

find $PKG | xargs file | grep -e "executable" -e "shared object" | grep ELF | cut -f 1 -d : | xargs -r strip --strip-unneeded 2> /dev/null || true
find $PKG | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs -r strip -g 2> /dev/null || true

mkdir -p $PKG/usr/doc/$PKGNAM-$VERSION
cp -a COPYING README* $PKG/usr/doc/$PKGNAM-$VERSION || true
cat $CWD/$PKGNAM.SlackBuild > $PKG/usr/doc/$PKGNAM-$VERSION/$PKGNAM.SlackBuild

mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc

# Remove empty dir
rmdir $PKG/usr/share || true

cd $PKG
/sbin/makepkg -l y -c n $OUTPUT/$PKGNAM-$VERSION-$ARCH-$BUILD$TAG.${PKGTYPE:-txz}
